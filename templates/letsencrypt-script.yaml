{{ template "vault.mode" . }}
{{- if ne .mode "external" }}
{{- if and (ne .mode "") (and (eq (.Values.global.enabled | toString) "true") (eq (.Values.server.authDelegator.enabled | toString) "true") (eq (.Values.server.letsencrypt.enabled | toString) "true")) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "vault.fullname" . }}-letsencrypt-create-certificate-script
  namespace: {{ .Release.Namespace }}
  labels:
    helm.sh/chart: {{ include "vault.chart" . }}
    app.kubernetes.io/name: {{ include "vault.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  create_cert_secret.py: |-
    import base64
    import os
    from kubernetes import client, config

    # environ({'VAULT_STANDBY_PORT_8201_TCP_ADDR': '172.20.223.163', 'VAULT_ACTIVE_PORT_8200_TCP': 'tcp://172.20.235.36:8200', 'VAULT_PORT_8201_TCP_PROTO': 'tcp', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_TCP_PROTO': 'tcp', 'QEMU_ARCH': 'x86_64', 'VAULT_ACTIVE_SERVICE_PORT': '8200', 'KUBERNETES_SERVICE_PORT': '443', 'VAULT_STANDBY_SERVICE_PORT_HTTPS_INTERNAL': '8201', 'VAULT_ACTIVE_PORT': 'tcp://172.20.235.36:8200', 'VAULT_SERVICE_HOST': '172.20.140.153', 'KUBERNETES_PORT': 'tcp://172.20.0.1:443', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_UDP_PORT': '53', 'VAULT_ACTIVE_PORT_8201_TCP': 'tcp://172.20.235.36:8201', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_UDP_PROTO': 'udp', 'VAULT_STANDBY_PORT_8200_TCP_PORT': '8200', 'CALLING_ZORSE_CONSUL_UI_PORT_80_TCP_ADDR': '172.20.181.131', 'VAULT_STANDBY_PORT_8201_TCP_PORT': '8201', 'VAULT_STANDBY_PORT_8200_TCP_PROTO': 'tcp', 'HOSTNAME': 'vault-letsencrypt-hook-vmvwh', 'VAULT_STANDBY_PORT_8201_TCP_PROTO': 'tcp', 'VAULT_STANDBY_SERVICE_HOST': '172.20.223.163', 'PYTHON_PIP_VERSION': '20.2.2', 'SHLVL': '1', 'CALLING_ZORSE_CONSUL_UI_PORT_80_TCP_PORT': '80', 'VAULT_UI_PORT_443_TCP_ADDR': '172.20.133.0', 'HOME': '/root', 'CALLING_ZORSE_CONSUL_UI_PORT_80_TCP_PROTO': 'tcp', 'VAULT_PORT_8200_TCP': 'tcp://172.20.140.153:8200', 'VAULT_SERVICE_PORT': '8200', 'VAULT_PORT': 'tcp://172.20.140.153:8200', 'VAULT_PORT_8201_TCP': 'tcp://172.20.140.153:8201', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_TCP': 'tcp://172.20.116.196:53', 'VAULT_UI_PORT_443_TCP_PORT': '443', 'GPG_KEY': 'E3FF2839C048B25C084DEBE9B26995E310250568', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_UDP': 'udp://172.20.116.196:53', 'VAULT_UI_PORT_443_TCP_PROTO': 'tcp', 'VAULT_STANDBY_PORT_8200_TCP': 'tcp://172.20.223.163:8200', 'VAULT_STANDBY_PORT': 'tcp://172.20.223.163:8200', 'VAULT_STANDBY_SERVICE_PORT': '8200', 'VAULT_STANDBY_PORT_8201_TCP': 'tcp://172.20.223.163:8201', 'VAULT_UI_SERVICE_PORT_HTTP': '443', 'CALLING_ZORSE_CONSUL_UI_PORT_80_TCP': 'tcp://172.20.181.131:80', 'CALLING_ZORSE_CONSUL_DNS_SERVICE_PORT_DNS_TCP': '53', 'PYTHON_GET_PIP_URL': 'https://github.com/pypa/get-pip/raw/5578af97f8b2b466f4cdbebe18a3ba2d48ad1434/get-pip.py', 'CALLING_ZORSE_CONSUL_DNS_SERVICE_PORT_DNS_UDP': '53', 'VAULT_UI_PORT_443_TCP': 'tcp://172.20.133.0:443', 'KUBERNETES_PORT_443_TCP_ADDR': '172.20.0.1', 'VAULT_UI_SERVICE_HOST': '172.20.133.0', 'PATH': '/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'SECRET_NAME': 'vault-tls-cert', 'CALLING_ZORSE_CONSUL_DNS_SERVICE_HOST': '172.20.116.196', 'CALLING_ZORSE_CONSUL_UI_SERVICE_PORT_HTTP': '80', 'KUBERNETES_PORT_443_TCP_PORT': '443', 'KUBERNETES_PORT_443_TCP_PROTO': 'tcp', 'LANG': 'C.UTF-8', 'VAULT_ACTIVE_SERVICE_PORT_HTTP': '8200', 'VAULT_UI_PORT': 'tcp://172.20.133.0:443', 'VAULT_ACTIVE_PORT_8200_TCP_ADDR': '172.20.235.36', 'VAULT_UI_SERVICE_PORT': '443', 'VAULT_ACTIVE_PORT_8201_TCP_ADDR': '172.20.235.36', 'PYTHON_VERSION': '3.8.5', 'CALLING_ZORSE_CONSUL_DNS_PORT': 'tcp://172.20.116.196:53', 'CALLING_ZORSE_CONSUL_UI_SERVICE_HOST': '172.20.181.131', 'VAULT_ACTIVE_SERVICE_PORT_HTTPS_INTERNAL': '8201', 'CALLING_ZORSE_CONSUL_DNS_SERVICE_PORT': '53', 'VAULT_ACTIVE_PORT_8200_TCP_PORT': '8200', 'KUBERNETES_SERVICE_PORT_HTTPS': '443', 'VAULT_ACTIVE_PORT_8201_TCP_PORT': '8201', 'VAULT_ACTIVE_PORT_8200_TCP_PROTO': 'tcp', 'KUBERNETES_PORT_443_TCP': 'tcp://172.20.0.1:443', 'POD_NAMESPACE': 'vault-dev', 'VAULT_ACTIVE_PORT_8201_TCP_PROTO': 'tcp', 'VAULT_SERVICE_PORT_HTTP': '8200', 'VAULT_ACTIVE_SERVICE_HOST': '172.20.235.36', 'KUBERNETES_SERVICE_HOST': '172.20.0.1', 'PWD': '/opt/certbot', 'VAULT_PORT_8200_TCP_ADDR': '172.20.140.153', 'PYTHON_GET_PIP_SHA256': 'd4d62a0850fe0c2e6325b2cc20d818c580563de5a2038f917e3cb0e25280b4d1', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_TCP_ADDR': '172.20.116.196', 'VAULT_PORT_8201_TCP_ADDR': '172.20.140.153', 'VAULT_SERVICE_PORT_HTTPS_INTERNAL': '8201', 'CALLING_ZORSE_CONSUL_UI_SERVICE_PORT': '80', 'CALLING_ZORSE_CONSUL_UI_PORT': 'tcp://172.20.181.131:80', 'VAULT_STANDBY_SERVICE_PORT_HTTP': '8200', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_UDP_ADDR': '172.20.116.196', 'VAULT_PORT_8200_TCP_PORT': '8200', 'VAULT_STANDBY_PORT_8200_TCP_ADDR': '172.20.223.163', 'CALLING_ZORSE_CONSUL_DNS_PORT_53_TCP_PORT': '53', 'VAULT_PORT_8200_TCP_PROTO': 'tcp', 'VAULT_PORT_8201_TCP_PORT': '8201'})


    def main():
        config.load_incluster_config()
        v1 = client.CoreV1Api()
        SECRET_NAME = os.environ['SECRET_NAME']
        NAMESPACE = os.environ['NAMESPACE']
        CERT_DIR = os.environ['CERT_DIR']
        metadata = {'name': SECRET_NAME, 'namespace': NAMESPACE}
        with open(os.path.join(CERT_DIR, 'fullchain.pem'), 'rb') as f:
            crt = base64.b64encode(f.read()).decode()
        with open(os.path.join(CERT_DIR, 'privkey.pem'), 'rb') as f:
            key = base64.b64encode(f.read()).decode()
        data = {'tls.crt': crt, 'tls.key': key}
        api_version = 'v1'
        kind = 'Secret'
        body = client.V1Secret(api_version, data, kind, metadata, type='kubernetes.io/tls')
        try:
            api_response = v1.create_namespaced_secret(NAMESPACE, body)
        except Exception:  # Conflict
            api_response = v1.patch_namespaced_secret(SECRET_NAME, NAMESPACE, body)


    if __name__ == '__main__':
        main()
{{- end }}
{{- end }}
